"""empty message

Revision ID: 74ecdaf28434
Revises: 
Create Date: 2025-08-26 17:30:09.928371

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import pgvector

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '74ecdaf28434'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('groups',
    sa.Column('group_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('group_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('user_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('face_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('profile_json', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('face_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('audit_access',
    sa.Column('access_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('viewer_id', sa.Integer(), nullable=True),
    sa.Column('subject_id', sa.Integer(), nullable=True),
    sa.Column('access_time', sa.DateTime(timezone=True), nullable=False),
    sa.Column('detail', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['subject_id'], ['users.user_id'], ),
    sa.ForeignKeyConstraint(['viewer_id'], ['users.user_id'], ),
    sa.PrimaryKeyConstraint('access_id')
    )
    op.create_table('embeddings',
    sa.Column('embedding_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('vector', pgvector.sqlalchemy.vector.VECTOR(dim=1536), nullable=False),
    sa.Column('text_ref', sa.Text(), nullable=False),
    sa.Column('visibility', sa.Enum('SELF', 'GROUP', 'PUBLIC', name='visibility_level'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('embedding_id')
    )
    op.create_index('ix_embeddings_owner_visibility', 'embeddings', ['owner_id', 'visibility'], unique=False)
    op.create_table('events',
    sa.Column('event_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('starts_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('location', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('visibility', sa.Enum('SELF', 'GROUP', 'PUBLIC', name='visibility_level'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_index('ix_events_owner_visibility', 'events', ['owner_id', 'visibility'], unique=False)
    op.create_table('group_members',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=50), nullable=False),
    sa.Column('joined_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.group_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('group_id', 'user_id'),
    sa.UniqueConstraint('group_id', 'user_id', name='uq_group_user')
    )
    op.create_index('ix_group_members_user_id', 'group_members', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_group_members_user_id', table_name='group_members')
    op.drop_table('group_members')
    op.drop_index('ix_events_owner_visibility', table_name='events')
    op.drop_table('events')
    op.drop_index('ix_embeddings_owner_visibility', table_name='embeddings')
    op.drop_table('embeddings')
    op.drop_table('audit_access')
    op.drop_table('users')
    op.drop_table('groups')
    # ### end Alembic commands ###
